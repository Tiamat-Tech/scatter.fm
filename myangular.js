// Generated by CoffeeScript 1.9.2
(function() {
  var LAST_FM_API_KEY, m;

  LAST_FM_API_KEY = "274b18a7aa58eea083ce78c0135953fd";

  m = angular.module('scatter.fm', []);

  m.controller('indexCtrl', function($scope, $location) {
    return $scope.visualise = function() {
      if ($scope.username) {
        return $location.path("/user/" + $scope.username);
      }
    };
  });

  m.factory('fetch_page', function($http, $timeout, random) {
    return function(username, page, callback) {
      var backoff_and_try_request;
      backoff_and_try_request = (function(_this) {
        return function(try_num) {
          var try_request, wait;
          try_request = function() {
            var backoff_and_retry;
            backoff_and_retry = function() {
              return backoff_and_try_request(try_num + 1);
            };
            return $http.jsonp("//ws.audioscrobbler.com/2.0/?callback=JSON_CALLBACK", {
              timeout: 20000,
              params: {
                method: "user.getrecenttracks",
                user: username,
                api_key: LAST_FM_API_KEY,
                format: "json",
                limit: "200",
                page: page
              }
            }).success((function(_this) {
              return function(json) {
                switch (false) {
                  case json.error !== 29:
                    console.log("ratelimited. backing off - try " + try_num + " for this req");
                    return backoff_and_retry();
                  case !json.error:
                    return callback(null, "unknown error: " + json.error);
                  case json.recenttracks.total !== "0":
                    return callback(null, "no scrobbles for this user");
                  default:
                    return callback(json);
                }
              };
            })(this)).error(function() {
              return backoff_and_retry();
            });
          };
          wait = 100 * Math.pow(2, try_num) * random();
          return $timeout(try_request, wait);
        };
      })(this);
      return backoff_and_try_request(0);
    };
  });

  m.factory('fetch_scrobbles', function(add_json_to_scrobbles, fetch_page, scrobbles, $rootScope) {
    return function(username) {
      return fetch_page(username, 1, (function(_this) {
        return function(json, err) {
          var fetch_another_page, i, in_flight_requests, pages_to_fetch, results, totalPages;
          if (err) {
            throw err;
          }
          add_json_to_scrobbles(json);
          console.log(scrobbles);
          totalPages = parseInt(json.recenttracks["@attr"].totalPages);
          if (totalPages === 1) {
            return;
          }
          pages_to_fetch = (function() {
            results = [];
            for (var i = 2; 2 <= totalPages ? i <= totalPages : i >= totalPages; 2 <= totalPages ? i++ : i--){ results.push(i); }
            return results;
          }).apply(this);
          in_flight_requests = 0;
          fetch_another_page = function() {
            in_flight_requests++;
            return fetch_page(username, pages_to_fetch.pop(), function(json, err) {
              if (err) {
                throw err;
              }
              add_json_to_scrobbles(json);
              console.log(scrobbles.length);
              return in_flight_requests--;
            });
          };
          return $rootScope.$watch((function() {
            return in_flight_requests;
          }), function() {
            if (in_flight_requests < 4 && pages_to_fetch.length > 0) {
              return fetch_another_page();
            }
          });
        };
      })(this));
    };
  });

  m.value('scrobbles', []);

  m.value('scrobbleStats', {
    minTime: Infinity,
    maxTime: -Infinity
  });

  m.value('random', Math.random);

  m.factory('add_json_to_scrobbles', function(scrobbles, scrobbleStats) {
    return function(json) {
      var d, date, i, len, my_scrobble, ref, results, scrobble;
      ref = json.recenttracks.track;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        scrobble = ref[i];
        if (scrobble['date'] == null) {
          continue;
        }
        d = new Date(scrobble['date']['uts'] * 1000);
        date = d.getTime();
        my_scrobble = {
          track: scrobble['name'],
          artist: scrobble['artist']['#text'],
          album: scrobble['album']['#text'],
          date: date,
          time: d.getHours() + (d.getMinutes() / 60)
        };
        if (scrobble['image'][1] && scrobble['image'][1]['#text']) {
          my_scrobble.image = scrobble['image'][1]['#text'];
        }
        scrobbles.push(my_scrobble);
        if (date < scrobbleStats.minTime) {
          scrobbleStats.minTime = date;
        }
        if (date > scrobbleStats.maxTime) {
          results.push(scrobbleStats.maxTime = date);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

  m.controller('userCtrl', function(scrobbles, $scope, $location, $routeParams, fetch_scrobbles, scrobbleStats) {
    $scope.username = $routeParams.username;
    scrobbles.length = 0;
    $scope.scrobbles = scrobbles;
    if ($scope.username) {
      fetch_scrobbles($scope.username);
    }
    $scope.showFeedback = true;
    $scope.showSearch = true;
    $scope.filterTerm;
    $scope.filterRegex = function() {
      return new RegExp(this.get("filterTerm"), "i");
    };
    $scope.validate = function() {
      var error;
      try {
        new RegExp($scope.filterTerm, "i");
        return null;
      } catch (_error) {
        error = _error;
        return "Whoops! That's not a regular expression: " + error;
      }
    };
    $scope.svgWidth = 1000;
    $scope.svgHeight = 600;
    $scope.y = function(scrobble) {
      return (scrobble.time / 24) * $scope.svgHeight;
    };
    $scope.x = function(scrobble) {
      return $scope.svgWidth * ((scrobble.date - scrobbleStats.minTime) / (scrobbleStats.maxTime - scrobbleStats.minTime));
    };
    $scope.activeArtist = null;
    $scope["class"] = function(scrobble) {
      if (scrobble.artist === $scope.activeArtist) {
        return 'active';
      } else {
        return '';
      }
    };
    return $scope.setActiveArtist = function(artist) {
      $scope.activeArtist = artist;
      return console.log($scope.activeArtist);
    };
  });

  m.directive('scatterSearch', function() {
    return {
      restrict: 'E',
      templateUrl: 'search_directive.html'
    };
  });

  m.config(function($routeProvider) {
    $routeProvider.when('/', {
      controller: 'indexCtrl',
      templateUrl: 'index_partial.html'
    });
    return $routeProvider.when('/user/:username', {
      controller: 'userCtrl',
      templateUrl: 'user_partial.html'
    });
  });

}).call(this);
